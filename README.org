* WHAT
  ringbuf is a simple ring buffer implementation in C. 

  It includes support for read(2) and write(2) operations on ring
  buffers, memcpy's into and out of ring buffers, setting the buffer
  contents to a constant value, and copies between ring buffers. It
  also supports searching for single characters, for use with
  line-oriented or character-delimited network protocols.

  It should be fairly straightforward to extend ringbuf to support
  other C library operations that operate on buffers, e.g., recv(2).

* WHY
  I implemented ringbuf because I needed a simple, dependency-free
  ring buffer type for use with network services written in C.

* INSTALLING
  ringbuf is not a library as such, so it doesn't need to be
  installed. Just copy the ringbuf.[ch] source files into your
  project. (Also see LICENSE below.)

  ringbuf has no dependencies beyond an ISO C90 standard library.

  Note that ringbuf.c contains several assert() statements. These are
  intended for use with the test harness (see below), and should
  probably be removed from production code, once you're confident that
  ringbuf works as intended.

  This distribution includes source for a test program executable
  (ringbuf-test.c), which runs extensive unit tests on the ringbuf
  implementation. On most platforms (other than Windows, which is not
  supported), you should be able to type 'make' to run the unit
  tests. Note that the Makefile uses the clang C compiler by default,
  but also has support for gcc -- just edit the Makefile so that it
  uses gcc instead of clang.

  The Makefile also includes targets for gcov coverage testing and
  valgrind memory testing, assuming you have those tools installed on
  your system.

* LICENSE
  ringbuf has no license; it is dedicated to the public domain. See
  the file COPYING, included in this distribution, for the specifics.

* CONTRIBUTING

  If you would like to make a pull request (PR) or other contribution
  to this project, please follow these guidelines:

  - Make one PR/patch per feature. Do not lump multiple features into
    a single PR. One PR per feature is a hassle for contributors, and
    for that I am sorry; but it makes reviewing contributions easier,
    and it also means that, if your contribution creates a bug or
    other issue, it's easier to track down the root cause. This policy
    also increases the likelihood that your PRs will be accepted in
    the case where there is an issue with one part of your PR, but the
    rest is fine. If you are in doubt about what constitutes "a
    feature," please contact me before making a pull request so that
    we can sort it out.

  - Make sure you have run all tests successfully before submitting
    your PR. If you are adding functionality, please add new tests to
    the test suite to exercise that functionality. If your PR fixes a
    bug, please write a test(s) that demonstrates a) the bug on the
    existing code base, and b) fixes the bug once your patch is
    applied.

  - By submitting a PR, or otherwise asking me to apply any code to
    this code base, you are agreeing that your contribution is
    dedicated to the public domain per the COPYING file included in
    this distribution, and that you are waiving any copyright claims
    with respect to your contribution. You also assert that this
    contribution is your own creation, and not taken from another
    work.

* CONTACT
  Drew Hess <dhess-src@bothan.net>

  http://drewhess.com/
